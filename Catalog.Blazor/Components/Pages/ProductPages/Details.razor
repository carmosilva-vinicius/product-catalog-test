@page "/products/details"
@using Catalog.Domain.Enums
@using Microsoft.EntityFrameworkCore
@using Catalog.Domain.Entities
@inject Catalog.Application.UseCases.Interfaces.IGetProductDetails GetProductDetails
@inject NavigationManager NavigationManager

@*@attribute [Authorize]*@

<PageTitle>Detalhes</PageTitle>

<h1>Detalhes</h1>

<div>
    <h2>Produto</h2>
    <hr />
    @if (product is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@product.Name</dd>
            <dt class="col-sm-2">Preço de Venda</dt>
            <dd class="col-sm-10">@product.SalePrice</dd>
            <dt class="col-sm-2">Descrição</dt>
            <dd class="col-sm-10">@product.Description</dd>
            <dt class="col-sm-2">Quantidade</dt>
            <dd class="col-sm-10">@product.Quantity</dd>
            <dt class="col-sm-2">Tipo</dt>
            <dd class="col-sm-10">@ProductTypeHelper.GetTypeName(product.Type)</dd>
            <dt class="col-sm-2">Data de Registro</dt>
            <dd class="col-sm-10">@product.RegistrationDate.ToString("dd/MM/yyyy")</dd>
        </dl>
        <div>
            <a href="@($"/products/edit?id={product.Id}")">Editar</a> |
            <a href="@($"/products")">Voltar a Lista</a>
        </div>
    }
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await GetProductDetails.Execute(Id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
